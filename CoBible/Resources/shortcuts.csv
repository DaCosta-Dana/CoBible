#No,What it does,How to do it?,Explanation
1,Declare public Variables,public String name;,"A variable accessible from anywhere in the program."
2,Declare private Variables,private int age;,"A variable accessible only within the same class."
3,Declare protected Variables,protected double salary;,"A variable accessible within the same package and subclasses."
4,Print to Console,System.out.println(""Test to print"");,"Prints text or values to the console."
5,If Statement,if (condition) { /* Code */ },"Executes a block of code only if the condition is true."
6,If-Else Statement,if (condition) { /* Code */ } else { /* Alternative code */ },"Runs different code based on a condition."
7,If-elsif-selse Statement,if (condition) { /* Code */ } elsif { /* Alternative code */ } Else { /* Alternative code 2 */ },"Adds multiple condition checks."
8,Switch Statement,switch (variable) { case 1: System.out.println(""Case 1""); break; case 2: System.out.println(""Case 2""); break; default: System.out.println(""Default case""); },"Selects a code block to execute based on a variable's value."
9,For Loop,for (int i = 0; i < 10; i++) { System.out.println(i); },"Loops through code a set number of times."
10,Enhanced For Loop,for (String item : list) { System.out.println(item); },"Iterates over collections like arrays or lists."
11,While Loop,while (condition) { /* Code */ },"Repeats code while a condition is true."
12,Do-While Loop,do { /* Code */ } while (condition);,"Ensures the code runs at least once before checking the condition."
13,Declare an Array,int[] numbers = {1, 2, 3, 4, 5};,"Stores multiple values in a single variable."
14,Iterate Over an Array,for (int num : numbers) { System.out.println(num); },"Loops through each element in an array."
15,Create a class,class MyClass { int x = 10; },"Defines a blueprint for objects."
16,Create an Object,MyClass obj = new MyClass(); System.out.println(obj.x);,"Instantiates an object from a class."
17,Constructor,class MyClass { MyClass() { System.out.println(""Constructor""); } },"Initializes an object when created."
18,Create a Method,public static void myMethod() { System.out.println(""Hello!""); },"Defines reusable code within a class."
19,Method with Parameters,public static int add(int a, int b) { return a + b; },"Accepts input values when called."
20,Method Overloading,static int add(int a, int b) { return a + b; },"Allows multiple methods with the same name but different parameters."
21,Method Overriding,class Child extends Parent { void show() { System.out.println(""Child""); } },"Replaces a parent method in a subclass."
22,Extend a Class,class Dog extends Animal { void makeSound() { System.out.println(""Bark!""); } },"Inherits properties and methods from another class."
23,Final Variable,final int x = 10;,"Prevents a variableâ€™s value from being changed."
24,Final Method,class A { final void display() { /* Cannot override */ } },"Prevents a method from being overridden."
25,Final Class,final class MyFinalClass { /* Cannot be extended */ },"Prevents a class from being inherited."
26,Static Method,class MyClass { static void myMethod() { System.out.println(""Static Method""); } },"A method that belongs to the class rather than an instance."
27,Class a static Method,MyClass.myMethod();,"Invokes a static method without creating an object."
28,Scanner for Input,Scanner scanner = new Scanner(System.in); String input = scanner.nextLine(); Scanner.close();,"Reads user input from the console."
29,Try-Catch Exception,try { int r = 10 / 0; } catch (Exception e) { },"Handles runtime errors without stopping execution."
30,Finally Block,try { /* Code */ } finally { System.out.println(""Always runs""); },"Runs code regardless of an exception occurring."
31,Throw an Exception,throw new IllegalArgumentException(""Invalid input"");,"Manually triggers an exception."
32,Create an Interface,interface Animal { void makeSound(); },"Defines a contract for implementing classes."
33,Implement an Interface,class Dog implements Animal { public void makeSound() { System.out.println(""Bark!""); } },"Enforces method implementation from an interface."
34,Abstract Class,abstract class Animal { abstract void makeSound(); },"Defines a base class with abstract methods."
35,HashMap Example,HashMap<String, Integer> map = new HashMap<>();,"Stores key-value pairs."
36,ArrayList Example,ArrayList<String> list = new ArrayList<>(); list.add(""Apple"");,"A resizable array implementation."
37,Iterate over ArrayList,for (String item : list) { System.out.println(item); },"Loops through an ArrayList."
38,HashSet Example,HashSet<Integer> set = new HashSet<>(); set.add(1);,"Stores unique elements with no order."
39,Thread Creation,class MyThread extends Thread { public void run() { System.out.println(""Thread!""); } },"Runs code in a separate thread."
40,Runnable Interface,class MyRunnable implements Runnable { public void run() { System.out.println(""Runnable!""); } },"Implements multithreading with an interface."
41,Synchronized Method,synchronized void myMethod() { /* Code */ },"Ensures thread safety by locking the method."
42,Atomic Integer,AtomicInteger counter = new AtomicInteger(0);,"Provides thread-safe integer operations."
43,Read File (BufferedWriter),BufferedReader br = new BufferedReader(new FileReader(""file.txt""));,"Reads a file efficiently."
44,Write File (BufferedWriter),BufferedWriter bw = new BufferedWriter(new FileWriter(""file.txt""));,"Writes to a file efficiently."
45,Check if file exists,File file = new File(""test.txt""); if (file.exists()) { },"Checks if a file exists before reading/writing."
46,Convert String to Integer,int num = Integer.parseInt(""123"");,"Converts a string to an integer."
47,Convert Integer to String,String str = String.valueOf(123);,"Converts an integer to a string."
48,Generate Random Number,Random rand = new Random(); int randomNum = rand.nextInt(100);,"Creates a random number between 0 and 99."
49,Get Current Date & Time,LocalDateTime now = LocalDateTime.now();,"Retrieves the current system date and time."
